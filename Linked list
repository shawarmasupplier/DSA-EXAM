#include <stdio.h>
#include <stdlib.h>

struct node {
    int info;
    struct node *next;
} *head = NULL, *temp = NULL, *tail = NULL;

// Function to insert at the beginning
void insert_beg() {
    printf("Enter the new node: ");
    temp = (struct node *)malloc(sizeof(struct node));

    if (temp == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    scanf("%d", &temp->info);
    temp->next = head;
    head = temp;

    if (tail == NULL) // If the list was empty, update tail
        tail = head;
}

// Function to insert at the end
void insert_end() {
    printf("Enter the new node: ");
    temp = (struct node *)malloc(sizeof(struct node));

    if (temp == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    scanf("%d", &temp->info);
    temp->next = NULL;

    if (head == NULL) { // If the list is empty, set head and tail to the new node
        head = temp;
        tail = temp;
    } else {
        tail->next = temp;
        tail = temp;
    }
}

// Function to insert at any position
void insert_at_position() {
    int pos, i;
    struct node *new_node, *current;

    printf("Enter the position: ");
    scanf("%d", &pos);

    new_node = (struct node *)malloc(sizeof(struct node));

    if (new_node == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    printf("Enter the new node: ");
    scanf("%d", &new_node->info);
    new_node->next = NULL;

    if (pos == 1) {
        new_node->next = head;
        head = new_node;
        if (tail == NULL) {
            tail = new_node;
        }
        return;
    }

    current = head;
    for (i = 1; i < pos - 1 && current != NULL; i++) {
        current = current->next;
    }

    if (current == NULL) {
        printf("Position out of range\n");
        free(new_node);
        return;
    }

    new_node->next = current->next;
    current->next = new_node;

    if (new_node->next == NULL) {
        tail = new_node;
    }
}

// Function to display the linked list
void display() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    printf("Linked List: ");
    temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->info);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function
int main() {
    int choice;

    while (1) {
        printf("\n1. Insert at Beginning\n2. Insert at End\n3. Insert at Position\n4. Display List\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                insert_beg();
                break;
            case 2:
                insert_end();
                break;
            case 3:
                insert_at_position();
                break;
            case 4:
                display();
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
